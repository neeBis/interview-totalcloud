{"version":3,"sources":["containers/Navbar.jsx","containers/Home.jsx","store/actions/order.js","store/actionTypes.js","components/Order.jsx","containers/RouteViews.jsx","store/reducers/index.js","store/reducers/order.js","store/index.js","containers/App.jsx","serviceWorker.js","index.js"],"names":["Navbar","className","to","Home","addremoveItem","list_items","cart_items","type","Order","props","state","list_id","cart_id","list_handleSelect","bind","cart_handleSelect","addItem","removeItem","getItems","this","id","setState","console","log","temp","temp_list","temp_cart","list","filter","item","tp","push","cart","listItems","cartItems","total","map","key","onClick","name","price","Component","connect","store","order","dispatch","a","err","RouteViews","exact","path","render","rootReducer","combineReducers","action","createStore","rootreducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAsBeA,EAnBA,kBACX,6BACA,yBAAKC,UAAU,WACb,yBAAKA,UAAU,qEACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,qCACb,wBAAIA,UAAU,sBACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,cACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,uB,QCWDC,EAtBF,kBACL,yBAAKF,UAAU,SACV,yBAAKA,UAAU,aACV,yBAAKA,UAAU,OACV,yBAAKA,UAAU,YACP,yBAAKA,UAAU,QACZ,+DACA,0PAGA,oDACA,4BAAQA,UAAU,OAAM,kBAAC,IAAD,CAAMC,GAAG,UAAT,iBAGnC,yBAAKD,UAAU,iB,iCCfzBG,EAAgB,SAACC,EAAWC,GAAZ,MAA2B,CAC7CC,KCFkB,kBDGlBD,aACAD,eEALG,E,YACE,WAAYC,GAAO,IAAD,8BAClB,4CAAMA,KACDC,MAAM,CACPC,QAAQ,EACRC,QAAQ,GAEZ,EAAKC,kBAAkB,EAAKA,kBAAkBC,KAAvB,gBACvB,EAAKC,kBAAkB,EAAKA,kBAAkBD,KAAvB,gBACvB,EAAKE,QAAQ,EAAKA,QAAQF,KAAb,gBACb,EAAKG,WAAW,EAAKA,WAAWH,KAAhB,gBATE,E,mFAcnBI,EADmBC,KAAKV,MAAjBS,c,wCAIQE,GAEdD,KAAKE,SAAS,CACPV,QAAQS,M,wCAGDA,GAEdD,KAAKE,SAAU,CACVT,QAAQQ,M,gCAIbE,QAAQC,IAAIJ,KAAKT,OACjB,IAAIc,EAAKL,KAAKT,MAAMC,QAChBc,EAAUN,KAAKV,MAAMJ,WACrBqB,EAAUP,KAAKV,MAAMH,WAErBqB,EAAKF,EAAUG,QAAO,SAASC,GAC/B,OAAOA,EAAKT,IAAMI,KAGrB,IAAI,IAAIM,KAAML,EAGPA,EAAUK,GAAIV,IAAII,GAAME,EAAUK,KAAKN,EAAUK,IAEzDX,KAAKV,MAAML,cAAcuB,EAAKD,K,mCAG9BJ,QAAQC,IAAIJ,KAAKT,OACjB,IAAIc,EAAKL,KAAKT,MAAME,QAChBa,EAAUN,KAAKV,MAAMJ,WACrBqB,EAAUP,KAAKV,MAAMH,WAErB0B,EAAKN,EAAUE,QAAO,SAASC,GAC/B,OAAOA,EAAKT,IAAMI,KAGrB,IAAI,IAAIM,KAAMJ,EAGPA,EAAUI,GAAIV,IAAII,GAAMC,EAAUM,KAAKL,EAAUI,IAEzDX,KAAKV,MAAML,cAAcqB,EAAUO,K,+BAE9B,IAAD,OAEAC,EAAU,GACVC,EAAU,GACVC,EAAM,EAKR,GAJChB,KAAKV,MAAMJ,aAEV4B,EAAYd,KAAKV,MAAMJ,WAAW+B,KAAI,SAAAP,GAAI,OAAK,wBAAIQ,IAAKR,EAAKT,GAAIkB,QAAS,kBAAI,EAAKzB,kBAAkBgB,EAAKT,MAAMS,EAAKU,KAAK,oCAAUV,EAAKW,MAAf,YAEzHrB,KAAKV,MAAMH,WAGZ,IAAI,IAAIwB,KADRI,EAAYf,KAAKV,MAAMH,WAAW8B,KAAI,SAAAP,GAAI,OAAK,wBAAIQ,IAAKR,EAAKT,GAAIkB,QAAS,kBAAI,EAAKvB,kBAAkBc,EAAKT,MAAMS,EAAKU,KAAK,oCAAUV,EAAKW,MAAf,WAC5GrB,KAAKV,MAAMH,WAGrB6B,GAAOhB,KAAKV,MAAMH,WAAWwB,GAAIU,MAI3C,OAAO,kBAAC,WAAD,KACG,yBAAKvC,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAAf,oBACA,wBAAIA,UAAU,YAAYgC,IAE9B,yBAAKhC,UAAU,gCACV,yBAAKA,UAAU,sBAAsBqC,QAASnB,KAAKH,SAAnD,eACA,yBAAKf,UAAU,qBAAqBqC,QAASnB,KAAKF,YAAlD,qBAEL,yBAAKhB,UAAU,yBACX,yBAAKA,UAAU,aAAf,aACC,wBAAIA,UAAU,YACbiC,EACD,wBAAIjC,UAAU,SAAd,UAA6B,oCAAUkC,EAAV,kB,GAnGzCM,aA4GLC,eAAQ,SAAAC,GAAK,MAAG,CAC3BtC,WAAWsC,EAAMC,MAAMvC,WACvBC,WAAWqC,EAAMC,MAAMtC,cAE3B,CAACY,SF9GuB,WAEhB,8CAAO,WAAM2B,GAAN,SAAAC,EAAA,sDACH,IAGID,EAASzC,EAFG,CAAC,CAACgB,GAAG,EAAEmB,KAAK,QAAQC,MAAM,KAAK,CAACpB,GAAG,EAAEmB,KAAK,SAASC,MAAM,KAAK,CAACpB,GAAG,EAAEmB,KAAK,SAASC,MAAM,MACxF,CAAC,CAACpB,GAAG,GAAGmB,KAAK,QAAQC,MAAM,KAAK,CAACpB,GAAG,GAAGmB,KAAK,SAASC,MAAM,KAAK,CAACpB,GAAG,GAAGmB,KAAK,QAAQC,MAAM,QAG1G,MAAMO,GAEFzB,QAAQC,IAAIwB,GARb,2CAAP,mDAAM,IE4GJ3C,iBAJKsC,CAKblC,GCxGawC,EATI,kBACd,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAI,kBAAC,EAAD,SAClC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAI,kBAAC,EAAD,Y,eCDrCC,EAJKC,YAAgB,CAChCT,MCFiB,WAAsB,IAArBlC,EAAoB,uDAAd,GAAG4C,EAAW,uCACtC,OAAOA,EAAO/C,MAEV,IJLqB,kBIMjB,MAAO,CACHD,WAAWgD,EAAOhD,WAClBD,WAAWiD,EAAOjD,YAE1B,QACI,OAAOK,MCLNiC,EAAQY,YAAYC,EAHX,GAIlBC,YAAQC,YAAgBC,KACvBC,OAAOC,sCAAsCD,OAAOC,wCAA0CJ,MCapFK,E,iLAXP,OAAQ,kBAAC,IAAD,CAAUnB,MAAOA,GACrB,kBAAC,IAAD,KACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GANFF,aCIEsB,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OAAO,kBAAC,EAAD,MAASiB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b945a7fb.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n//import logo from '../img/logo.jpeg';  <img src={logo} class=\"navbar-brand mx-auto\"/>\nconst Navbar = () => (\n    <div>\n    <div className=\"nav-bar\">    \n      <nav className=\"navbar navbar-expand-md navbar-brand-center static-nav  fixed-top\">\n      <div className=\"container\">\n      <div className=\"collapse navbar-collapse nav-left\">\n        <ul className=\"navbar-nav ml-auto\">\n            <li><Link to=\"/\">ABOUT </Link></li>\n            <li><Link to=\"/order\">OUR FOOD </Link></li>\n            <li><Link to=\"/\">PLANS </Link></li>\n            <li><Link to=\"/\">CONTACT US </Link></li>\n        </ul>\n      </div>\n      </div>\n      </nav>\n    </div>\n    </div>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nconst Home = () => (\n        <div className=\"home \">\n             <div className=\"container\">\n                  <div className=\"row\">\n                       <div className=\"col-md-6\">\n                               <div className=\"data\">\n                                  <span>Have no time to prepare Food?</span>\n                                  <p>Choose food, time and get it in no time.\n                                  The item argument is a reference to the current element in the array as filter() checks it against the condition. This is useful for accessing properties, in the case of objects.\n                                  </p>\n                                  <p>Made it easy for you.</p>\n                                  <button className=\"btn\"><Link to=\"/order\">Order Now!</Link></button>    \n                               </div>\n                            </div>\n                       <div className=\"col-md-6\">\n                             \n                       </div>\n                  </div>\n             </div>\n        </div>\n)\n\nexport default Home;","import {ADD_REMOVE_ITEM} from '../actionTypes';\nexport const addremoveItem = (list_items,cart_items) =>({\n           type:ADD_REMOVE_ITEM,\n           cart_items,\n           list_items\n});\nexport const getItems = () => {\n\n        return async dispatch =>{\n            try{\n               var itemList=[{id:1,name:'Pozza',price:100},{id:2,name:'Burger',price:150},{id:3,name:'Drinks',price:150}];\n               var cartList=[{id:11,name:'Pepsi',price:400},{id:12,name:'vegies',price:400},{id:13,name:'Halwa',price:400}];\n                dispatch(addremoveItem(itemList,cartList));\n            }\n            catch(err)\n            {\n                console.log(err);\n            }\n        }\n};\n\n","export const ADD_REMOVE_ITEM='ADD_REMOVE_ITEM';\n","import React,{Component,Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport {getItems,addremoveItem} from '../store/actions';\n\nclass Order extends Component{\n        constructor(props){\n        super(props);\n        this.state={\n            list_id:0,\n            cart_id:0\n        }\n        this.list_handleSelect=this.list_handleSelect.bind(this);\n        this.cart_handleSelect=this.cart_handleSelect.bind(this); \n        this.addItem=this.addItem.bind(this);\n        this.removeItem=this.removeItem.bind(this);\n    }\n\n    componentWillMount() {\n       const {getItems} = this.props;\n       getItems();\n    }\n\n    list_handleSelect(id){\n       // console.log(id);\n        this.setState({\n               list_id:id\n           });\n    }\n    cart_handleSelect(id){\n        //console.log(id);\n        this.setState ({\n             cart_id:id\n        });\n     } \n     addItem(){\n        console.log(this.state);\n        var temp=this.state.list_id;\n        var temp_list=this.props.list_items;\n        var temp_cart=this.props.cart_items;\n\n        var list=temp_list.filter(function(item){\n            return item.id != temp;\n        });\n \n         for(let tp in temp_list)\n         {\n             //console.log(temp_list[tp]);\n             if(temp_list[tp].id==temp){temp_cart.push(temp_list[tp]);}\n            }\n        this.props.addremoveItem(list,temp_cart);\n     }\n     removeItem(){\n        console.log(this.state);\n        var temp=this.state.cart_id;\n        var temp_list=this.props.list_items;\n        var temp_cart=this.props.cart_items;\n\n        var cart=temp_cart.filter(function(item){\n            return item.id != temp;\n        });\n \n         for(let tp in temp_cart)\n         {\n             //console.log(temp_list[tp]);\n             if(temp_cart[tp].id==temp){temp_list.push(temp_cart[tp]);}\n            }\n        this.props.addremoveItem(temp_list,cart);\n     }\n    render(){\n        //console.log(this.props.list_items);\n        var listItems=[];\n        var cartItems=[];\n        var total=0;\n        if(this.props.list_items)\n        {\n            listItems = this.props.list_items.map(item => (<li key={item.id} onClick={()=>this.list_handleSelect(item.id)}>{item.name}<span>Rs.{item.price}\\-</span></li>));\n          }\n          if(this.props.cart_items)\n          {\n            cartItems = this.props.cart_items.map(item => (<li key={item.id} onClick={()=>this.cart_handleSelect(item.id)}>{item.name}<span>Rs.{item.price}\\-</span></li>));  \n            for(let tp in this.props.cart_items)\n            {\n\n                total+=this.props.cart_items[tp].price;\n               }   \n          }\n          \n      return <Fragment>\n                <div className=\"order  text-center\">\n                    <div className=\"container\">\n                        <div className=\"row\">                            \n                           <div className=\"col-md-5 \">\n                               <div className=\"list_head\">Availabe Options</div>\n                               <ul className=\"list_box\">{listItems}</ul>\n                           </div>\n                           <div className=\"col-md-2 text-center buttons\">\n                                <div className=\"but btn btn-primary\" onClick={this.addItem}>Add To Cart</div>\n                                <div className=\"but btn btn-danger\" onClick={this.removeItem}>Remove From Cart</div>\n                           </div>\n                           <div className=\"col-md-5 offset-md-0 \">\n                               <div className=\"cart_head\">Your Cart</div>\n                                <ul className=\"cart_box\">\n                                {cartItems}\n                                <li className=\"total\">Total: <span>Rs.{total}\\-</span></li>\n                                </ul>\n                           </div>\n                        </div>\n                    </div>\n                </div>\n        </Fragment>\n    }\n}\nexport default connect(store=>({\n    list_items:store.order.list_items,\n    cart_items:store.order.cart_items\n}),\n{getItems,addremoveItem}\n)(Order);","import React from 'react';\nimport {Switch,Route,withRouter} from 'react-router-dom';\nimport Home from './Home';\nimport Order from '../components/Order';\nconst RouteViews = () => (\n     <main>\n         <Switch>\n             <Route exact path=\"/\" render={()=><Home/>}/>\n             <Route exact path=\"/order\" render={()=><Order/>}/>\n         </Switch>\n     </main>\n);\n\nexport default RouteViews;","import {combineReducers} from 'redux';\nimport {order} from './order';\n\nconst rootReducer = combineReducers({\n    order\n});\n\nexport default rootReducer;\n","import {ADD_REMOVE_ITEM} from '../actionTypes';\n\nexport const order = (state=[],action) => {\n    switch(action.type)\n    {\n        case ADD_REMOVE_ITEM:\n            return {\n                cart_items:action.cart_items,\n                list_items:action.list_items\n            }\n        default:\n            return state;\n    }\n}","import {createStore,applyMiddleware,compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootreducer from './reducers';\nconst DEFAULT_STATE = {\n};\n\nexport const store = createStore(rootreducer,DEFAULT_STATE,\n    compose(applyMiddleware(thunk)\n    ,window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__() || compose\n    )\n);","import React,{Component,Fragment} from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Navbar from './Navbar';\nimport RouteViews from './RouteViews';\nimport Home from './Home'; \nimport {store} from '../store';\n\nclass App extends Component {\n    render(){\n        return (<Provider store={store}>\n            <Router>\n                <Fragment>\n                    <Navbar/>\n                    <RouteViews/>\n                </Fragment>\n            </Router>\n            </Provider>\n        )\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}